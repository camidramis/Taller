
import math as mt
import numpy as np
import matplotlib.pyplot as plt

#Defino mis condiciones
pos=(1,1)
vec=(3/5,4/5)
a1=mt.sqrt(2)
b1=mt.sqrt(2)

def derivadabis(u,g,h,metodo):
    if metodo == 'centrada':
        der=(g(u+h)-g(u-h))/(2*h)
    else: 
        der((g(u+h)-g(u))/h)
    return der

def func1(t):
    return(t**2)

def func2(t):
    return t**2 - 1

def func3(t):
    return (mt.sin(t))-t

def norma(x):
    norm=(mt.sqrt(x[0]**2+x[1]**2))
    return np.array([x[0]/norm,x[1]/norm])
norma(vec)

def normal(x):
    gr=tang_elipse(a1,b1,x)/((tang_elipse(a1,b1,x)[0]**2 + tang_elipse(a1,b1,x)[1]**2)**.5)
    return gr

#Clase 6: BILLAR ELIPTICO

#Función elíptica
def elip_fun(a,b,x):
    return x[0]**2/a**2+x[1]**2/b**2

def recta(p,t,v):
    vt=tuple(t*i for i in v)
    x1=p[0]+vt[0]
    y1=p[1]+vt[1]
    return(x1,y1)

def comp(t):
    return(elip_fun(a1,b1,recta(pos,t,vec)))

comp(3)

#Metodo de newton
def metNewton(xi,f,kmax):
    k=0
    while k<kmax:
        if derivadabis(xi,f,0.01,'centrada')!=0:
            xf=xi-f(xi)/derivadabis(xi,f,0.01,'centrada')
            xi=xf
            k=k+1
        else:
            return xf, k
    return xf, k

#Calculo mi t*
t_estrella, reps = metNewton(25,comp,750)

#Calculo el punto de impacto evaluando t* en la recta
p_impacto=recta(pos,t_estrella,vec)

#Verifico evaluando en la elipse, se tiene que anular. 
elip_fun(a1,b1,p_impacto) #me da cercano a cero 

#Hallar el vector tangente
def tang_elipse(a,b,x):
    x2=2*x[0]/a**2
    y2=2*x[1]/b**2
    return np.array([x2,y2])

te=tang_elipse(a1,b1,p_impacto)
norma(te)

vec_T=tang_elipse(a1,b1,p_impacto)
vec_T_norm=norma(vec_T)
recta(p_impacto, t_estrella, vec_T_norm)

#Pasamos a la reflexion de la bola sobre el borde luego de impactar
def h_reflector(x,v):
    x=np.array(x)
    v=np.array(v)
    norma_cuad=np.dot(v,v)
    v_refl=x-2*np.dot(x,v)*v/norma_cuad
    if np.dot(v_refl, tang_elipse(a1,b1,p_impacto))>0:
        v_refl=-v_refl
    return v_refl

h_reflector(p_impacto,vec_T_norm)
