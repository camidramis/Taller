import math as mt
import numpy as np
import matplotlib.pyplot as plt

#descensoGradiente(parabcirc)

def derivadabis(g,t,h,metodo):
    if metodo == 'centrada':
        der=(g(t+h)-g(t-h))/(2*h)
    else: 
        der((g(t+h)-g(t))/h)
    return der

#Clase 6: BILLAR ELIPTICO

#Función elíptica
def elip_func(a,b,x):
    return x[0]**2/a**2+x[1]**2/b**2-1

def recta(t,v):
    return(pos+t*v)

def h(a,b,t):
    return(elip_func(a,b,recta(t)))

def func1(t):
    return(t**2)

def func2(t):
    return t**2 - 1

def func3(t):
    return ((mt.sin(t))-t)

#Metodo de newton
def metNewton(xi,f,kmax,ep):
    if derivadabis(f,xi,0.001,'centrada')!=0:
        k=0
        xf=xi
        while k<kmax:
            x=xf
            xf= xf - f(xi) / derivadabis(f,xi,0.001,'centrada')
            k=k+1
            if (xf-x)<ep:
                return xf, k

ep_pred=0.001
metNewton(3,func1,50,ep_pred)
metNewton(2,func2,50,ep_pred)

p=[0.5,0.5]
pos=np.array(p)
vec=np.array([1/3,2/3])

                print(f(xf))
    return xf

metNewton(6,func1,50,0.1)
